apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'


apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'io.fabric'
//apply plugin: 'androidx.navigation.safeargs'

repositories {
    google()
    maven { url 'https://maven.fabric.io/public' }
}

androidExtensions {
    experimental = true
}



def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

def weatherUrl = "http://api.openweathermap.org/data/2.5/"

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    compileSdkVersion 29
    defaultConfig {
        applicationId androidApplicationId
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 4
        versionName "1.1.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            sourceSets {
                release.java.srcDirs += 'src/release/kotlin'
            }
        }

        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix '.debug'
            debuggable true
            jniDebuggable true
            minifyEnabled false
            shrinkResources false

            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
            buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
            buildConfigField "String", "WEATHER_URL", "\"${weatherUrl}\""

            sourceSets {
                debug.java.srcDirs += 'src/debug/kotlin'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}

configurations.all { config ->
    if (config.name.contains('UnitTest') || config.name.contains('AndroidTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}

/*afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: essosFabricApiSecret)
            entry(key: "apiKey", value: essosFabricApiKey)
        }
    }
}*/

dependencies {
    implementation project(path: ':domain')
    implementation project(path: ':data')

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.14.0"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.5.0'


    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'

    implementation 'com.google.android.material:material:1.1.0'

    implementation "androidx.navigation:navigation-fragment-ktx:2.2.1"
    implementation "androidx.navigation:navigation-ui-ktx:2.2.1"

    implementation 'com.google.firebase:firebase-database:19.2.1'
    implementation 'com.pawegio.kandroid:kandroid:0.8.7@aar'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation("com.github.hotchemi:permissionsdispatcher:$permissionsdispatcherVersion") {
        exclude module: "support-v13"
    }
    kapt "com.github.hotchemi:permissionsdispatcher-processor:$permissionsdispatcherVersion"

    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.skyfishjy.ripplebackground:library:1.0.1"

    implementation 'androidx.core:core-ktx:1.2.0'
    // + android architecture - room

    //epoxy
    implementation 'com.airbnb.android:epoxy:3.8.0'
    kapt 'com.airbnb.android:epoxy-processor:3.8.0'
    implementation 'com.airbnb.android:epoxy-paging:3.8.0'

    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2'

    kapt "androidx.room:room-compiler:2.2.3"
    implementation "androidx.room:room-ktx:2.2.3"


    def moxyVersion = "2.0.2"
    implementation "com.github.moxy-community:moxy-androidx:$moxyVersion"
    kapt "com.github.moxy-community:moxy-compiler:$moxyVersion"
    //crashlytics
    implementation 'com.google.firebase:firebase-core:17.2.2'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }

    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'

    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.12.1'
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'

    //crashes
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
/*    api ('com.crashlytics.sdk.android:crashlytics:2.9.0@aar') {
        transitive = true
    }*/

    implementation 'com.google.firebase:firebase-auth:19.2.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation("com.nhaarman:mockito-kotlin:$kotlinMockitoVersion") {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }

    //epoxy
    implementation 'com.airbnb.android:epoxy:3.9.0'
    implementation 'com.airbnb.android:epoxy-glide-preloading:3.8.0'
    kapt 'com.airbnb.android:epoxy-processor:3.8.0'
    implementation 'com.airbnb.android:epoxy-paging:3.9.0'


    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

apply plugin: 'com.google.gms.google-services'
